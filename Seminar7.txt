\documentclass[12pt]{article}
\usepackage[utf8]{inputenc}
\usepackage[romanian]{babel}
\usepackage{listings}
\usepackage{color}
\usepackage{geometry}
\geometry{margin=1in}

\title{Seminar 7. Operatii cu fisiere in Java}
\author{}
\date{}

\lstset{
	breaklines=true,
	breakatwhitespace=true,
	language=Java,
	basicstyle=\ttfamily\small,
	keywordstyle=\color{blue},
	commentstyle=\color{green},
	stringstyle=\color{red},
	showstringspaces=false
}

\begin{document}

	\maketitle

	\section{Partea Teoretica}

	\textbf{Timp de lucru estimat: 60 minute}

	\subsection{Introducere in operatii cu fisiere}

	In Java, operatiile cu fisiere permit citirea si scrierea datelor in fisiere de pe sistemul de fisiere. Aceste operatii sunt esentiale pentru stocarea persistenta a datelor.

	\subsection{Clasele importante pentru manipularea fisierelor}

	\begin{itemize}
		\item \textbf{File}: Reprezinta un fisier sau un director din sistemul de fisiere.
		\item \textbf{FileReader} si \textbf{FileWriter}: Folosite pentru citirea si scrierea caracterelor in fisiere text.
		\item \textbf{BufferedReader} si \textbf{BufferedWriter}: Asigura citirea si scrierea eficienta prin intermediul unui buffer.
		\item \textbf{FileInputStream} si \textbf{FileOutputStream}: Folosite pentru citirea si scrierea octetilor in fisiere binare.
		\item \textbf{Scanner}: Poate fi utilizata pentru a citi date dintr-un fisier text.
		\item \textbf{PrintWriter}: Permite scrierea formatata in fisiere text.
	\end{itemize}

	\subsection{Manipularea fisierelor text}

	\subsubsection{Citirea din fisier folosind \texttt{FileReader} si \texttt{BufferedReader}}

	\begin{lstlisting}
		// Importurile necesare
		import java.io.FileReader;
		import java.io.BufferedReader;
		import java.io.IOException;

		// Cod pentru citirea din fisier
		try {
			FileReader fr = new FileReader("fisier.txt");
			BufferedReader br = new BufferedReader(fr);
			String linie;
			while ((linie = br.readLine()) != null) {
				System.out.println(linie);
			}
			br.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	\end{lstlisting}

	\subsubsection{Scrierea in fisier folosind \texttt{FileWriter} si \texttt{BufferedWriter}}

	\begin{lstlisting}
		// Importurile necesare
		import java.io.FileWriter;
		import java.io.BufferedWriter;
		import java.io.IOException;

		// Cod pentru scrierea in fisier
		try {
			FileWriter fw = new FileWriter("fisier.txt");
			BufferedWriter bw = new BufferedWriter(fw);
			bw.write("Acesta este un text scris in fisier.");
			bw.newLine();
			bw.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	\end{lstlisting}

	\subsubsection{Utilizarea clasei \texttt{Scanner} pentru citirea din fisier}

	\begin{lstlisting}
		// Importurile necesare
		import java.io.File;
		import java.io.FileNotFoundException;
		import java.util.Scanner;

		// Cod pentru citirea din fisier
		try {
			File fisier = new File("fisier.txt");
			Scanner scanner = new Scanner(fisier);
			while (scanner.hasNextLine()) {
				String linie = scanner.nextLine();
				System.out.println(linie);
			}
			scanner.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	\end{lstlisting}

	\subsubsection{Utilizarea clasei \texttt{PrintWriter} pentru scrierea in fisier}

	\begin{lstlisting}
		// Importurile necesare
		import java.io.PrintWriter;
		import java.io.IOException;

		// Cod pentru scrierea in fisier
		try {
			PrintWriter pw = new PrintWriter("fisier.txt");
			pw.println("Scrierea unei linii in fisier.");
			pw.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	\end{lstlisting}

	\subsection{Manipularea fisierelor binare}

	\subsubsection{Citirea din fisier folosind \texttt{FileInputStream}}

	\begin{lstlisting}
		// Importurile necesare
		import java.io.FileInputStream;
		import java.io.IOException;

		// Cod pentru citirea din fisier
		try {
			FileInputStream fis = new FileInputStream("fisier.bin");
			int byteCitit;
			while ((byteCitit = fis.read()) != -1) {
				// Procesarea octetilor cititi
				System.out.print((char) byteCitit);
			}
			fis.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	\end{lstlisting}

	\subsubsection{Scrierea in fisier folosind \texttt{FileOutputStream}}

	\begin{lstlisting}
		// Importurile necesare
		import java.io.FileOutputStream;
		import java.io.IOException;

		// Cod pentru scrierea in fisier
		try {
			FileOutputStream fos = new FileOutputStream("fisier.bin");
			String data = "Date binare de scris in fisier.";
			fos.write(data.getBytes());
			fos.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	\end{lstlisting}

	\subsection{Tratamentul exceptiilor}

	Operatiile cu fisiere pot genera exceptii, cum ar fi \texttt{FileNotFoundException} sau \texttt{IOException}. Este important sa tratam aceste exceptii folosind blocurile \texttt{try-catch} pentru a evita erorile in timpul rularii programului.

	\section{Partea Practica}

	\textbf{Timp de lucru estimat: 90 minute}

	\subsection{Probleme Rezolvate}

	\subsubsection{Problema 1: Citirea si afisarea continutului unui fisier text}

	\textbf{Enunt:} Scrieti un program care citeste continutul unui fisier text numit \texttt{"input.txt"} si afiseaza continutul pe ecran.

	\textbf{Cod Java:}

	\begin{lstlisting}
		import java.io.FileReader;
		import java.io.BufferedReader;
		import java.io.IOException;

		public class CitireFisierText {
			public static void main(String[] args) {
				try {
					FileReader fr = new FileReader("input.txt");
					BufferedReader br = new BufferedReader(fr);
					String linie;
					while ((linie = br.readLine()) != null) {
						System.out.println(linie);
					}
					br.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	\end{lstlisting}

	\subsubsection{Problema 2: Scrierea unor date introduse de utilizator intr-un fisier}

	\textbf{Enunt:} Scrieti un program care cere utilizatorului sa introduca linii de text de la tastatura si le scrie intr-un fisier numit \texttt{"output.txt"}. Programul se opreste cand utilizatorul introduce "stop".

	\textbf{Cod Java:}

	\begin{lstlisting}
		import java.io.FileWriter;
		import java.io.BufferedWriter;
		import java.io.IOException;
		import java.util.Scanner;

		public class ScriereFisierText {
			public static void main(String[] args) {
				Scanner scanner = new Scanner(System.in);
				try {
					FileWriter fw = new FileWriter("output.txt");
					BufferedWriter bw = new BufferedWriter(fw);
					System.out.println("Introduceti textul (scrieti 'stop' pentru a termina):");
					while (true) {
						String linie = scanner.nextLine();
						if (linie.equalsIgnoreCase("stop")) {
							break;
						}
						bw.write(linie);
						bw.newLine();
					}
					bw.close();
					System.out.println("Datele au fost scrise in fisier.");
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	\end{lstlisting}

	\subsubsection{Problema 3: Copierea continutului unui fisier in alt fisier}

	\textbf{Enunt:} Scrieti un program care citeste continutul unui fisier numit \texttt{"sursa.txt"} si il copiaza intr-un fisier numit \texttt{"destinatie.txt"}.

	\textbf{Cod Java:}

	\begin{lstlisting}
		import java.io.FileReader;
		import java.io.FileWriter;
		import java.io.BufferedReader;
		import java.io.BufferedWriter;
		import java.io.IOException;

		public class CopiereFisier {
			public static void main(String[] args) {
				try {
					FileReader fr = new FileReader("sursa.txt");
					BufferedReader br = new BufferedReader(fr);
					FileWriter fw = new FileWriter("destinatie.txt");
					BufferedWriter bw = new BufferedWriter(fw);
					String linie;
					while ((linie = br.readLine()) != null) {
						bw.write(linie);
						bw.newLine();
					}
					br.close();
					bw.close();
					System.out.println("Copierea s-a realizat cu succes.");
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	\end{lstlisting}

	\subsubsection{Problema 4: Numararea cuvintelor dintr-un fisier text}

	\textbf{Enunt:} Scrieti un program care citeste un fisier text numit \texttt{"text.txt"} si afiseaza numarul total de cuvinte din fisier.

	\textbf{Cod Java:}

	\begin{lstlisting}
		import java.io.File;
		import java.io.FileNotFoundException;
		import java.util.Scanner;

		public class NumarareCuvinte {
			public static void main(String[] args) {
				try {
					File fisier = new File("text.txt");
					Scanner scanner = new Scanner(fisier);
					int numarCuvinte = 0;
					while (scanner.hasNext()) {
						scanner.next();
						numarCuvinte++;
					}
					scanner.close();
					System.out.println("Numarul total de cuvinte este: " + numarCuvinte);
				} catch (FileNotFoundException e) {
					e.printStackTrace();
				}
			}
		}
	\end{lstlisting}

	\subsubsection{Problema 5: Citirea numerelor dintr-un fisier si calcularea sumei}

	\textbf{Enunt:} Un fisier numit \texttt{"numere.txt"} contine pe fiecare linie un numar intreg. Scrieti un program care citeste numerele si calculeaza suma lor.

	\textbf{Cod Java:}

	\begin{lstlisting}
		import java.io.FileReader;
		import java.io.BufferedReader;
		import java.io.IOException;

		public class SumaNumerelorDinFisier {
			public static void main(String[] args) {
				try {
					FileReader fr = new FileReader("numere.txt");
					BufferedReader br = new BufferedReader(fr);
					String linie;
					int suma = 0;
					while ((linie = br.readLine()) != null) {
						int numar = Integer.parseInt(linie.trim());
						suma += numar;
					}
					br.close();
					System.out.println("Suma numerelor este: " + suma);
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	\end{lstlisting}

	\subsection{Probleme Propuse}

	\textbf{1.} Scrieti un program care citeste un fisier text si afiseaza numarul de linii, numarul de cuvinte si numarul de caractere din fisier.

	\textbf{Soluție partiala:}

	\begin{itemize}
		\item Folositi \texttt{BufferedReader} pentru a citi linie cu linie din fisier.
		\item Pentru fiecare linie, incrementati numarul de linii si adaugati la numarul total de caractere lungimea liniei.
		\item Folositi \texttt{String.split(" ")} pentru a separa cuvintele si a incrementa numarul de cuvinte.
	\end{itemize}

	\textbf{2.} Realizati un program care copiaza continutul unui fisier binar intr-un alt fisier binar.

	\textbf{Soluție partiala:}

	\begin{itemize}
		\item Utilizati \texttt{FileInputStream} si \texttt{FileOutputStream}.
		\item Cititi octet cu octet din fisierul sursa si scrieti-l in fisierul destinatie.
	\end{itemize}

	\textbf{3.} Scrieti un program care citeste un fisier text si inlocuieste toate aparitiile unui cuvant dat cu un alt cuvant, salvand rezultatul intr-un fisier nou.

	\textbf{Soluție partiala:}

	\begin{itemize}
		\item Cititi continutul fisierului intr-un \texttt{StringBuilder}.
		\item Folositi metoda \texttt{replaceAll()} pentru a inlocui cuvantul.
		\item Scrieti continutul modificat intr-un nou fisier.
	\end{itemize}

	\textbf{4.} Creati un program care citeste un fisier text si determina frecventa fiecarui cuvant din fisier.

	\textbf{Soluție partiala:}

	\begin{itemize}
		\item Utilizati o structura de date precum \texttt{HashMap<String, Integer>} pentru a tine evidenta frecventei cuvintelor.
		\item Pentru fiecare cuvant citit, incrementati contorul din map.
	\end{itemize}

	\textbf{5.} Scrieti un program care citeste numere reale dintr-un fisier si calculeaza media aritmetica a acestora.

	\textbf{Soluție partiala:}

	\begin{itemize}
		\item Cititi fiecare numar si adaugati-l la suma totala.
		\item Tineti evidenta numarului de elemente pentru a calcula media.
	\end{itemize}

	\textbf{6.} Realizati un program care citeste un fisier text si afiseaza doar liniile care contin un anumit cuvant dat de la tastatura.

	\textbf{Soluție partiala:}

	\begin{itemize}
		\item Cititi linie cu linie din fisier.
		\item Folositi metoda \texttt{contains()} pentru a verifica prezenta cuvantului in linie.
	\end{itemize}

	\textbf{7.} Scrieti un program care imbină doua fisiere text intr-un singur fisier, alternand liniile din fiecare fisier.

	\textbf{Soluție partiala:}

	\begin{itemize}
		\item Cititi simultan din ambele fisiere folosind doi \texttt{BufferedReader}.
		\item Scrieti alternativ cate o linie din fiecare fisier in fisierul rezultat.
	\end{itemize}

	\textbf{8.} Creati un program care citeste un fisier si afiseaza continutul acestuia in ordine inversa (de la ultima linie la prima).

	\textbf{Soluție partiala:}

	\begin{itemize}
		\item Cititi toate liniile si stocati-le intr-un vector.
		\item Parcurgeti lista in ordine inversa si afisati fiecare linie.
	\end{itemize}

	\textbf{9.} Scrieti un program care citeste un fisier binar si afiseaza continutul acestuia in format hexadecimal.

	\textbf{Soluție partiala:}

	\begin{itemize}
		\item Cititi octet cu octet din fisier.
		\item Folositi \texttt{String.format("%02X", byte)} pentru a afisa in format hexadecimal.
		\end{itemize}

		\textbf{10.} Realizati un program care verifica daca un fisier text este palindrom (continutul sau citit de la inceput la sfarsit este acelasi cu continutul citit de la sfarsit la inceput).

		\textbf{Soluție partiala:}

		\begin{itemize}
			\item Cititi intreg continutul fisierului intr-un \texttt{String}.
			\item Eliminati spatiile si semnele de punctuatie pentru o comparatie corecta.
			\item Comparati sirul cu inversul sau folosind \texttt{StringBuilder.reverse()}.
		\end{itemize}


	\end{document}
